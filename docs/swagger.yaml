basePath: /
definitions:
  models.CreateUserResponse:
    properties:
      message:
        type: string
    type: object
  models.DeleteUserResponse:
    properties:
      message:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
      id:
        type: string
    type: object
  models.LoginStruct:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.RegisterStruct:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  models.TokenResponse:
    properties:
      token:
        type: string
    type: object
  models.UpdateUserResponse:
    properties:
      message:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API для All Inclusive приложения с использованием Go, Gin, GORM, JWT
    и Swagger
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: All Inclusive App API
  version: "1.0"
paths:
  /delete_user/{id}:
    delete:
      description: Delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete user
      tags:
      - users
  /get_all_users:
    get:
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all users
      tags:
      - users
  /get_user/{id}:
    get:
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
  /login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login User
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginStruct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Add new user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterStruct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /update_user/{id}:
    put:
      consumes:
      - application/json
      description: Update user with id and some parameters
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Parameters
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update user
      tags:
      - users
swagger: "2.0"
